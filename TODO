config.h

array:
    fix loading
    initializer-list constructor http://www.cplusplus.com/reference/initializer_list/initializer_list/

vector + matrix:
    ? sparse vectors http://stackoverflow.com/a/14924175/4180822
    SharedDenseMatrix, reshaping vector -> matrix
        constructor SharedDenseMatrix( Vector & vector, const IndexType rows, const IndexType cols ) would use vector.getData()

mesh:
    store arithmetics

run script:
    make
    rm out/prefix*
    main
    mesh-visualize.py (pass parameters: mesh size, area size)
    output file names should not contain mesh size

tests:
    test interfaces (Matrix, Vector) (templated test functions, pass all inherited classes + base class)
    machine epsilon http://en.cppreference.com/w/cpp/types/numeric_limits/epsilon

plotting:
    calculating velocities
    gradients/streamlines
    inherent transpose: http://stackoverflow.com/questions/16897585/matplotlib-streamplot-arrows-pointing-the-wrong-way

two-phase model:
    started in two-phase branch



incomplete test for mesh:
==================================

void test_mesh(void)
{
    RectangularMesh mesh(1, 1, 3, 4);
    cout << "#cells: " << mesh.num_cells() << endl;
    cout << "#edges: " << mesh.num_edges() << endl;

    cout << "is_inner_edge" << endl;
    int inner_count = 0;
    for( int i = 0; i < mesh.num_edges(); i++ ) {
        cout << "index " << i << " is ";
        bool inner = mesh.is_inner_edge(i);
        if( inner == true ) {
            cout << "inner" << endl;
            inner_count++;
        }
        else
            cout << "outer" << endl;
    }
    cout << "counted " << inner_count << " inner edges, " << mesh.num_edges() - inner_count << " outer edges" << endl;

    cout << "testing edge_for_cell()" << endl;
    for( int cell = 0; cell < mesh.num_cells(); cell++ ) {
        cout << "cell " << cell << ", edges: ";
        for( int j = 0; j < mesh.edges_per_cell(); j++ ) {
            cout << mesh.edge_for_cell( cell, j ) << " ";
        }
        cout << endl;
    }

    cout << "testing cell_for_edge()" << endl;
    for( int edge = 0; edge < mesh.num_edges(); edge++ ) {
        cout << "edge " << edge << ", cells: ";
        for( int j = 0; j < 2; j++ ) {
            cout << mesh.cell_for_edge( edge, j ) << " ";
        }
        cout << endl;
    }
}

==================================
